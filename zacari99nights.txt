-- Services
local SoundService = game:GetService("SoundService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

-- Play a sound and show notification
local sound = Instance.new("Sound")
sound.SoundId = "rbxassetid://131644923"
sound.Parent = SoundService
sound.Volume = 1
sound.Looped = false
pcall(function() sound:Play() end)

pcall(function()
    StarterGui:SetCore("SendNotification", {
        Title = "üîë Whitelisted.",
        Text = "Hello Friend. You have been whitelisted.",
        Duration = 7
    })
end)

-- Load WindUI Library
local WindUI
do
    local ok, result = pcall(function()
        return require("./src/init")
    end)
    if ok and type(result) == "table" then
        WindUI = result
    else
        -- Fallback to HTTP GET if local require fails
        WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/main.lua"))()
    end
end

-- Create Window
local Window = WindUI:CreateWindow({
    Title = 'Vercore.xyz Paid',
    Author = "by Vercore",
    Folder = "vercore",
    NewElements = true,
    OpenButton = {
        Title = "Open Vercore UI",
        CornerRadius = UDim.new(1,0),
        StrokeThickness = 3,
        Enabled = true,
        Draggable = true,
        OnlyMobile = false,
        Color = ColorSequence.new(
            Color3.fromHex("#30FF6A"),
            Color3.fromHex("#e7ff2f")
        )
    }
})

-- Tabs & Sections
local CombatTab = Window:Tab({ Title = "‚öîÔ∏è Combat", Icon = "swords" })
local VisualsTab = Window:Tab({ Title = "üëÄ Visuals", Icon = "eye" })
local WorldTab = Window:Tab({ Title = "üåç World", Icon = "globe-2" })
local RandomTab = Window:Tab({ Title = "‚ùì Random", Icon = "dice" })

local CombatLeftSection = CombatTab:Section({ Title = "Weapon Mods" })
local CombatRightSection = CombatTab:Section({ Title = "External Mods" })
local HitboxSection = CombatTab:Section({ Title = "Hitbox" })

local VisualsLeftSection = VisualsTab:Section({ Title = "Visuals" })
local WorldLeftSection = WorldTab:Section({ Title = "Environment" })
local RandomLeftSection = RandomTab:Section({ Title = "Miscellaneous" })

-- =========================================================================
-- Hitbox Variables and Functions
-- =========================================================================
local validCharacters = {}
local originalHeadSizes = {}
local hitboxEnabled = false
local hitboxHeadSizeX, hitboxHeadSizeY, hitboxHeadTransparency = 8, 8, 0.5
local hitboxConn

local function isCharacterModel(m)
    return typeof(m) == "Instance" and m:IsA("Model") and (m:FindFirstChild("Head") or m:FindFirstChild("LowerTorso"))
end

local function addToVC(obj)
    if isCharacterModel(obj) then
        validCharacters[obj] = true
        local head = obj:FindFirstChild("Head")
        if head and head:IsA("BasePart") and not originalHeadSizes[head] then
            originalHeadSizes[head] = head.Size
        end
        obj.ChildAdded:Connect(function(c)
            if c.Name == "Head" and c:IsA("BasePart") and not originalHeadSizes[c] then
                originalHeadSizes[c] = c.Size
            end
        end)
    end
end

local function removeFromVC(obj)
    validCharacters[obj] = nil
end

for _, v in ipairs(Workspace:GetChildren()) do
    addToVC(v)
end

Workspace.ChildAdded:Connect(addToVC)
Workspace.ChildRemoved:Connect(removeFromVC)

local function applyHitboxOnce()
    local newSize = Vector3.new(hitboxHeadSizeX, hitboxHeadSizeY, hitboxHeadSizeX)
    for model, _ in pairs(validCharacters) do
        if model and model.Parent then
            local head = model:FindFirstChild("Head")
            if head and head:IsA("BasePart") then
                if not originalHeadSizes[head] then
                    originalHeadSizes[head] = head.Size
                end
                head.Size = newSize
                head.Transparency = hitboxHeadTransparency
                head.CanCollide = false
            end
        end
    end
end

local function restoreHitbox()
    for head, orig in pairs(originalHeadSizes) do
        if head and head.Parent then
            head.Size = orig
            head.Transparency = 0
        end
    end
end

local function setHitboxEnabled(value)
    hitboxEnabled = value
    if hitboxConn then
        hitboxConn:Disconnect()
        hitboxConn = nil
    end
    if value then
        hitboxConn = RunService.Heartbeat:Connect(applyHitboxOnce)
    else
        restoreHitbox()
    end
end

-- Hitbox UI
HitboxSection:Toggle({
    Title = 'Enable Hitbox',
    Desc = 'Toggles the head hitbox on/off',
    Default = false,
    Callback = function(Value)
        setHitboxEnabled(Value)
    end
})

HitboxSection:Slider({
    Title = 'Head Size X',
    Desc = 'X dimension of the head hitbox',
    Step = 1,
    Value = { Min = 1, Max = 15, Default = hitboxHeadSizeX },
    Callback = function(Value)
        hitboxHeadSizeX = Value
    end
})

HitboxSection:Slider({
    Title = 'Head Size Y',
    Desc = 'Y dimension of the head hitbox',
    Step = 1,
    Value = { Min = 1, Max = 15, Default = hitboxHeadSizeY },
    Callback = function(Value)
        hitboxHeadSizeY = Value
    end
})

HitboxSection:Slider({
    Title = 'Head Transparency',
    Desc = 'Transparency of the head hitbox',
    Step = 0.1,
    Value = { Min = 0, Max = 1, Default = hitboxHeadTransparency },
    Callback = function(Value)
        hitboxHeadTransparency = Value
    end
})

-- =========================================================================
-- Combat Left - No Spread / No Recoil
-- =========================================================================
local no_spread = nil
local no_recoil = nil

CombatLeftSection:Toggle({
    Title = "No Spread",
    Desc = "Removes bullet inaccuracy.",
    Default = false,
    Callback = function(state)
        if state then
            -- attempting to hook RNG - keep original logic; declare previous value to be restored later
            no_spread = hookmetamethod(Random.new(), "__namecall", newcclosure(function(self, ...)
                local method = getnamecallmethod()
                if method=="NextInteger" and debug.info(3,"l")==283 and debug.info(3,"s"):find("RangedWeaponClient") or
                   method=="NextInteger" and debug.info(3,"l")==152 and debug.info(3,"s"):find("BowClient") then
                    if getstack(3,12)==-100 and getstack(3,13)==100 then
                        setstack(3,12,0)
                        setstack(3,13,0)
                    end
                end
                return no_spread(self,...)
            end))
        else
            no_spread = nil
        end
    end
})

CombatLeftSection:Space()

CombatLeftSection:Toggle({
    Title = "No Recoil",
    Desc = "Removes camera shake when firing.",
    Default = false,
    Callback = function(state)
        if state then
            no_recoil = hookfunction(CFrame.new, newcclosure(function(...)
                if debug.info(3,"l")==389 and debug.info(3,"s"):find("Camera") then
                    setstack(3,1,{cameraXShake=0,rotSpeed=0,rotMag=0,returnTime=0,push=0,returnLerp=0,cameraY=0,cameraX=0,lerp=0})
                end
                return no_recoil(...)
            end))
        else
            no_recoil = nil
        end
    end
})

-- =========================================================================
-- Combat Right - External Buttons / Silent Aim
-- =========================================================================

CombatRightSection:Button({
    Title = "No Cooldown",
    Desc = "Loads 'Mine speed v5' script.",
    Color = Color3.fromHex("#30FF6A"),
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Trident-survival-stuff/refs/heads/main/Mine%20speed%20v5", true))()
        Window:Notify({Title = "No Cooldown", Content = "Script Loaded."})
    end
})

CombatRightSection:Space()

CombatRightSection:Button({
    Title = "Magic Bullet Redirection",
    Desc = "Loads 'Magic bullet redirection' script.",
    Color = Color3.fromHex("#e7ff2f"),
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/V5-paid/refs/heads/main/Magic%20bullet%20redirection", true))()
        Window:Notify({Title = "Magic Bullet", Content = "Script Loaded."})
    end
})

CombatRightSection:Space()

CombatRightSection:Button({
    Title = "Silent Aim",
    Desc = "Loads Silent Aim script.",
    Color = Color3.fromHex("#ff4830"),
    Callback = function()
        -- Keep original Silent Aim code as-is (large block). Wrap in pcall to avoid stopping script on errors.
        pcall(function()
            -- Silent Aim script content from the original (kept intact)
            local baseRadius = 199

            local fovCircle = Drawing.new("Circle")
            fovCircle.Visible = true
            fovCircle.Thickness = 1
            fovCircle.Color = Color3.fromRGB(255, 255, 255)
            fovCircle.Radius = baseRadius
            fovCircle.Filled = false

            local snapLine = Drawing.new("Line")
            snapLine.Visible = false
            snapLine.Color = Color3.fromRGB(255, 255, 255)
            snapLine.Thickness = 1

            local targetCircle = Drawing.new("Circle")
            targetCircle.Visible = false
            targetCircle.Thickness = 1
            targetCircle.Color = Color3.fromRGB(255, 255, 255)
            targetCircle.Radius = 2
            targetCircle.Filled = false

            local CoreGui = game:GetService("CoreGui")
            local HL = Instance.new("Highlight")
            HL.Name = "Highlight"
            HL.Parent = CoreGui
            HL.FillTransparency = 1
            HL.OutlineColor = Color3.fromRGB(255, 255, 255)

            local Classes = getrenv()._G.classes
            local CameraClient = Classes.Camera
            local FPSClient = Classes.FPS
            local Camera = cloneref(game:GetService("Workspace").CurrentCamera)

            local GetFunction = function(Script, Line)
                for _, v in pairs(getgc()) do
                    if typeof(v) == "function" and debug.info(v, "sl") then
                        local src, lineNum = debug.info(v, "s"), debug.info(v, "l")
                        if src:find(Script) and lineNum == Line then
                            return v
                        end
                    end
                end
            end

            local SetInfraredEnabled = GetFunction("PlayerClient", 588)
            local PlayerReg = debug.getupvalue(SetInfraredEnabled, 2)

            local validGuns = {
                "AR15", "C9", "Crossbow", "Bow", "EnergyRifle", "GaussRifle",
                "HMAR", "KABAR", "LeverActionRifle", "M4A1", "PipePistol",
                "PipeSMG", "PumpShotgun", "SCAR", "SVD", "USP9", "UZI", "Blunderbuss"
            }

            local function IsValidGun(gun)
                return table.find(validGuns, tostring(gun)) ~= nil
            end

            local function GetClosestTarget(maxDistance)
                local closestTarget, targetVelocity, closestDistance = nil, nil, math.huge
                for i, v in next, PlayerReg do
                    if v.type == "Player" and not v.sleeping and v.model:FindFirstChild("HumanoidRootPart") then
                        local distanceToPlayer = (v.model.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude
                        local screenPoint = Camera:WorldToViewportPoint(v.model.Head.Position)
                        local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - fovCircle.Position).Magnitude
                        if distanceToPlayer <= maxDistance and distanceFromCenter <= fovCircle.Radius and distanceToPlayer < closestDistance then
                            closestTarget = v.model
                            targetVelocity = v.velocityVector
                            closestDistance = distanceToPlayer
                        end
                    end
                end
                return closestTarget, targetVelocity
            end

            local function CalculateBulletDrop(tPos, tVel, cPos, pSpeed, pDrop)
                local dTT = (tPos - cPos).Magnitude
                local tTT = dTT / pSpeed

                local sVE = 8.8 - (pSpeed / (400 + pSpeed / 30))

                local horizontalVel = Vector3.new(tVel.X, 0, tVel.Z) * 7
                local verticalVel = Vector3.new(0, tVel.Y, 0) * 2

                local adjustedVel = horizontalVel + verticalVel

                local pTP = tPos + (adjustedVel * tTT)

                local dP = -pDrop ^ (tTT * pDrop) + 1
                local pPWD = pTP - Vector3.new(0, dP, 0)

                return pPWD
            end

            local oldGetCFrame = CameraClient.GetCFrame
            CameraClient.GetCFrame = function()
                local closest, velocityVector = GetClosestTarget(1000)
                local equippedData = FPSClient.GetEquippedItem()
                if equippedData and closest and closest:FindFirstChild("HumanoidRootPart") and IsValidGun(equippedData.type) then
                    local itemClass = Classes[equippedData.type]
                    if itemClass then
                        local projectileSpeed = itemClass.ProjectileSpeed
                        local projectileDrop = itemClass.ProjectileDrop

                        local predictedPosition , tTT = CalculateBulletDrop(closest.Head.Position, velocityVector, Camera.CFrame.Position, projectileSpeed, projectileDrop)
                        return CFrame.new(Camera.CFrame.Position, predictedPosition)
                    end
                end
                return oldGetCFrame()
            end

            RunService.RenderStepped:Connect(function()
                -- update FOV circle radius scaling safely (protect against missing Camera)
                if Camera and Camera.FieldOfView then
                    fovCircle.Radius = baseRadius * (math.tan(math.rad(50)) / math.tan(math.rad(Camera.FieldOfView))) ^ 0.35
                    if Camera.ViewportSize then
                        fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                    end
                end
                local closest, _ = GetClosestTarget(1000)
                if closest and closest:FindFirstChild("Head") then
                    if Camera then
                        local headPosition = Camera:WorldToViewportPoint(closest.Head.Position)
                        snapLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        snapLine.To = Vector2.new(headPosition.X, headPosition.Y)
                        snapLine.Visible = true
                        targetCircle.Position = Vector2.new(headPosition.X, headPosition.Y)
                        targetCircle.Visible = true
                        HL.Adornee = closest
                    end
                else
                    HL.Adornee = nil
                    snapLine.Visible = false
                    targetCircle.Visible = false
                end
            end)

            Window:Notify({Title = "Silent Aim", Content = "Script Loaded."})
        end)
    end
})

-- =========================================================================
-- Visuals UI Elements (WindUI)
-- =========================================================================

VisualsLeftSection:Button({
    Title = "ESP",
    Desc = "Loads External ESP script.",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Trident-survival-stuff/refs/heads/main/V5%20esp", true))()
        Window:Notify({Title = "ESP", Content = "Script Loaded."})
    end
})

VisualsLeftSection:Space()

VisualsLeftSection:Button({
    Title = "CrossHair",
    Desc = "Loads Custom Crosshair script.",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Trident-survival-stuff/refs/heads/main/Cross%20hair", true))()
        Window:Notify({Title = "Crosshair", Content = "Script Loaded."})
    end
})

-- =========================================================================
-- World UI Elements (WindUI)
-- =========================================================================

local Camera = workspace.CurrentCamera
local DesiredColor = Color3.fromRGB(255,255,255)
local custom_ambient, FovEnabled = false, false
local no_fog, no_shadows, no_colorshift = false, false, false
local SpoofedFov = 120
local ambientFunc = {
    TimeOfDay = Lighting.TimeOfDay,
    Ambient = Lighting.Ambient,
    GlobalShadows = Lighting.GlobalShadows,
    ColorShift_Top = Lighting.ColorShift_Top,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    FogEnd = Lighting.FogEnd,
    FogStart = Lighting.FogStart,
    FogColor = Lighting.FogColor
}
local fovFunc = { FieldOfView = Camera and Camera.FieldOfView or 70 }

local spoofed_ambient2
spoofed_ambient2 = hookmetamethod(game,"__index",newcclosure(function(self,key)
    if checkcaller() then return spoofed_ambient2(self,key) end
    if self==Lighting and ambientFunc[key]~=nil then return ambientFunc[key] end
    if self==Camera and fovFunc[key] then return fovFunc[key] end
    return spoofed_ambient2(self,key)
end))

local spoofed_ambient1
spoofed_ambient1 = hookmetamethod(game,"__newindex",newcclosure(function(self,key,value)
    if checkcaller() then return spoofed_ambient1(self,key,value) end
    if self==Lighting and ambientFunc[key]~=nil then
        ambientFunc[key]=value
        if key=="Ambient" then return spoofed_ambient1(self,key,custom_ambient and DesiredColor or value)
        elseif key=="GlobalShadows" then return spoofed_ambient1(self,key,no_shadows and false or value)
        elseif key=="ColorShift_Top" or key=="ColorShift_Bottom" then return spoofed_ambient1(self,key,no_colorshift and Color3.new(0,0,0) or value)
        elseif key=="FogStart" or key=="FogEnd" then return spoofed_ambient1(self,key,no_fog and 1e6 or value) end
    end
    if self==Camera and key=="FieldOfView" then
        fovFunc[key]=value
        if FovEnabled then return spoofed_ambient1(self,key,SpoofedFov) end
    end
    return spoofed_ambient1(self,key,value)
end))

WorldLeftSection:Toggle({
    Title = "Ambient Light Mod",
    Desc = "Sets ambient light to a custom color (White by default).",
    Default = false,
    Callback = function(state)
        custom_ambient = state
    end
})

WorldLeftSection:Space()

WorldLeftSection:Toggle({
    Title = "Custom FOV",
    Desc = "Sets your Field of View to 120.",
    Default = false,
    Callback = function(state)
        FovEnabled = state
    end
})

WorldLeftSection:Space()

WorldLeftSection:Slider({
    Title = 'Set FOV Value',
    Desc = 'The Field of View to use when Custom FOV is enabled.',
    Step = 1,
    Value = { Min = 30, Max = 150, Default = SpoofedFov },
    Callback = function(Value)
        SpoofedFov = Value
    end
})

-- =========================================================================
-- Random UI Elements (WindUI)
-- =========================================================================

local Chatspam = false
RandomLeftSection:Toggle({
    Title = "Chat Spammer",
    Desc = "Spams the Discord invite link in chat.",
    Default = false,
    Callback = function(state)
        Chatspam = state
    end
})

task.spawn(function()
    while true do
        task.wait(12)
        if Chatspam and game.TextChatService and game.TextChatService.TextChannels and game.TextChatService.TextChannels.RBXGeneral then
            pcall(function()
                game.TextChatService.TextChannels.RBXGeneral:SendAsync(".gg Q8a9yQb7NY")
            end)
        end
    end
end)

RandomLeftSection:Space()

RandomLeftSection:Button({
    Title = "Load Name Spoof",
    Desc = "Loads Name Spoof script.",
    Color = Color3.fromHex("#00CFFF"),
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Trident-survival-stuff/refs/heads/main/Name%20spoof", true))()
        Window:Notify({Title = "Name Spoof", Content = "Script Loaded."})
    end
})

-- =========================================================================
-- Watermark (Drawing) - display and update loop
-- =========================================================================
local watermarkEnabled = true

local watermarkText = Drawing.new("Text")
watermarkText.ZIndex = 2
watermarkText.Transparency = 1
watermarkText.Outline = true
watermarkText.OutlineColor = Color3.new(0,0,0)
watermarkText.Font = Drawing.Fonts.UI
watermarkText.Size = 18
watermarkText.Text = "Vercore.xyz | Paid"

local watermarkBox = Drawing.new("Square")
watermarkBox.ZIndex = 1
watermarkBox.Filled = true
watermarkBox.Color = Color3.new(0, 0, 0)
watermarkBox.Transparency = 0.5
watermarkBox.Size = Vector2.new(150, 24)

RunService.RenderStepped:Connect(function()
    if not watermarkEnabled then
        watermarkText.Visible = false
        watermarkBox.Visible = false
        return
    end

    watermarkText.Visible = true
    watermarkBox.Visible = true

    local viewport = Camera and Camera.ViewportSize or Vector2.new(800,600)
    local pos = Vector2.new(viewport.X - 160, 10)
    watermarkBox.Position = pos
    watermarkText.Position = pos + Vector2.new(8, 3)
end)