local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Throne.exe",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Throne",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local CombatTab = Window:CreateTab("Combat", 4483362458) -- Title, Image
local VisualsTab = Window:CreateTab("Visuals", 4483362458) -- Title, Image
local WorldTab = Window:CreateTab("World", 4483362458) -- Title, Image
local MiscTab = Window:CreateTab("Misc", 4483362458) -- Title, Image

local CombatSection = CombatTab:CreateSection("Combat")
local VisualsSection = VisualsTab:CreateSection("Visuals")
local WorldSection = WorldTab:CreateSection("World")
local MiscSection = MiscTab:CreateSection("Misc")

local MagicBButton = CombatTab:CreateButton({
   Name = "Magic Bullet",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Cranx1/Throne.exe/refs/heads/main/Magic%20bullet%20redirection.txt",true))()
   end,
})

local SilentAimButton = CombatTab:CreateButton({
   Name = "SilentAim",
   Callback = function()
local baseRadius = 200

local fovCircle = Drawing.new("Circle")
fovCircle.Visible = true
fovCircle.Thickness = 1
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Radius = baseRadius
fovCircle.Filled = false

local snapLine = Drawing.new("Line")
snapLine.Visible = false
snapLine.Color = Color3.fromRGB(255, 255, 255)
snapLine.Thickness = 1

local targetCircle = Drawing.new("Circle")
targetCircle.Visible = false
targetCircle.Thickness = 1
targetCircle.Color = Color3.fromRGB(255, 255, 255)
targetCircle.Radius = 2
targetCircle.Filled = false

local CoreGui = game:GetService("CoreGui")
local HL = Instance.new("Highlight")
HL.Name = "Highlight"
HL.Parent = CoreGui
HL.FillTransparency = 1
HL.OutlineColor = Color3.fromRGB(255, 255, 255)

local RunService = game:GetService("RunService")
local Classes = getrenv()._G.classes
local CameraClient = Classes.Camera
local FPSClient = Classes.FPS
local Camera = cloneref(game:GetService("Workspace").CurrentCamera)

local GetFunction = function(Script, Line)
    for _, v in pairs(getgc()) do
        if typeof(v) == "function" and debug.info(v, "sl") then
            local src, lineNum = debug.info(v, "s"), debug.info(v, "l")
            if src:find(Script) and lineNum == Line then
                return v
            end
        end
    end
end

local SetInfraredEnabled = GetFunction("PlayerClient", 588)
local PlayerReg = debug.getupvalue(SetInfraredEnabled, 2)

local validGuns = {
    "AR15", "C9", "Crossbow", "Bow", "EnergyRifle", "GaussRifle",
    "HMAR", "KABAR", "LeverActionRifle", "M4A1", "PipePistol",
    "PipeSMG", "PumpShotgun", "SCAR", "SVD", "USP9", "UZI", "Blunderbuss"
}

function IsValidGun(gun)
    return table.find(validGuns, tostring(gun)) ~= nil
end

function GetClosestTarget(maxDistance)
    local closestTarget, targetVelocity, closestDistance = nil, nil, math.huge
    for i, v in next, PlayerReg do
        if v.type == "Player" and not v.sleeping and v.model:FindFirstChild("HumanoidRootPart") then
            local distanceToPlayer = (v.model.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude
            local screenPoint = Camera:WorldToViewportPoint(v.model.Head.Position)
            local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - fovCircle.Position).Magnitude
            if distanceToPlayer <= maxDistance and distanceFromCenter <= fovCircle.Radius and distanceToPlayer < closestDistance then
                closestTarget = v.model
                targetVelocity = v.velocityVector
                closestDistance = distanceToPlayer
            end
        end
    end
    return closestTarget, targetVelocity
end

function CalculateBulletDrop(tPos, tVel, cPos, pSpeed, pDrop)
    local dTT = (tPos - cPos).Magnitude
    local tTT = dTT / pSpeed

    local sVE = 8.8 - (pSpeed / (400 + pSpeed / 30))

    local horizontalVel = Vector3.new(tVel.X, 0, tVel.Z) * 7
    local verticalVel = Vector3.new(0, tVel.Y, 0) * 2

    local adjustedVel = horizontalVel + verticalVel

    local pTP = tPos + (adjustedVel * tTT)

    local dP = -pDrop ^ (tTT * pDrop) + 1
    local pPWD = pTP - Vector3.new(0, dP, 0)

    return pPWD
end

local oldGetCFrame = CameraClient.GetCFrame
CameraClient.GetCFrame = function()
    local closest, velocityVector = GetClosestTarget(1000)
    local equippedData = FPSClient.GetEquippedItem()
    if equippedData and closest and closest:FindFirstChild("HumanoidRootPart") and IsValidGun(equippedData.type) then
        local itemClass = Classes[equippedData.type]
        if itemClass then
            local projectileSpeed = itemClass.ProjectileSpeed
            local projectileDrop = itemClass.ProjectileDrop
            
            local predictedPosition , tTT = CalculateBulletDrop(closest.Head.Position, velocityVector, Camera.CFrame.Position, projectileSpeed, projectileDrop)
            return CFrame.new(Camera.CFrame.Position, predictedPosition)
        end
    end
    return oldGetCFrame()
end

RunService.RenderStepped:Connect(function()
    fovCircle.Radius = baseRadius * (math.tan(math.rad(50)) / math.tan(math.rad(Camera.FieldOfView))) ^ 0.35
    fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local closest, _ = GetClosestTarget(1000)
    if closest and closest:FindFirstChild("Head") then
        local headPosition = Camera:WorldToViewportPoint(closest.Head.Position)
        snapLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        snapLine.To = Vector2.new(headPosition.X, headPosition.Y)
        snapLine.Visible = true
        targetCircle.Position = Vector2.new(headPosition.X, headPosition.Y)
        targetCircle.Visible = true
        HL.Adornee = closest
    else
end)
   -- The function that takes place when the button is pressed
   end,
})

local HitBoxButton = CombatTab:CreateButton({
   Name = "HitBox",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Cranx1/Throne.exe/refs/heads/main/TSthings/V5%20hitbox",true))()
   -- The function that takes place when the button is pressed
   end,
})

local NoRecoilButton = CombatTab:CreateButton({
   Name = "No Recoil",
   Callback = function()
local no_recoil; no_recoil = hookfunction(CFrame.new, newcclosure(function(...)
    if (debug.info(3,"l") == 389 and debug.info(3,"s"):find("Camera")) then
        setstack(3, 1, {cameraXShake=0,rotSpeed=0,rotMag=0,returnTime=0,push=0,returnLerp=0,cameraY=0,cameraX=0,lerp=0})
    end
    return no_recoil(...)
end))
   -- The function that takes place when the button is pressed
   end,
})

local NoSpreadButton = CombatTab:CreateButton({
   Name = "NoSpread",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local MiningButton = CombatTab:CreateButton({
   Name = "Mining Drill Super Speed(BETA)",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Cranx1/Throne.exe/refs/heads/main/TSthings/Mine%20speed%20v5",true))()
   -- The function that takes place when the button is pressed
   end,
})

-- // Visual
local ESPButton = VisualTab:CreateButton({
   Name = ESP",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Cranx1/Throne.exe/refs/heads/main/TSthings/V5%20esp",true))()
   -- The function that takes place when the button is pressed
   end,
})

-- // World

local Lighting = game:GetService("Lighting")
local Camera = workspace.CurrentCamera
--
local DesiredColor = Color3.fromRGB(255, 255, 255)
local custom_ambient = false
local FovEnabled = false
local no_fog, no_shadows, no_colorshift = false, false, false
local SpoofedFov = 120
--
local ambientFunc = {
    TimeOfDay = Lighting.TimeOfDay,
    Ambient = Lighting.Ambient,
    GlobalShadows = Lighting.GlobalShadows,
    ColorShift_Top = Lighting.ColorShift_Top,
    ColorShift_Bottom = Lighting.ColorShift_Bottom,
    FogEnd = Lighting.FogEnd,
    FogStart = Lighting.FogStart,
    FogColor = Lighting.FogColor
}
--
local fovFunc = {
    FieldOfView = Camera.FieldOfView
}
--
local spoofed_ambient2
spoofed_ambient2 = hookmetamethod(game, "__index", newcclosure(function(self, key)
    if checkcaller() then
        return spoofed_ambient2(self, key)
    end
    if self == Lighting and ambientFunc[key] ~= nil then
        return ambientFunc[key]
    end
    if self == Camera and fovFunc[key] then
        return fovFunc[key]
    end
    return spoofed_ambient2(self, key)
end))
--
local spoofed_ambient1
spoofed_ambient1 = hookmetamethod(game, "__newindex", newcclosure(function(self, key, value)
    if checkcaller() then
        return spoofed_ambient1(self, key, value)
    end
--
    if self == Lighting and ambientFunc[key] ~= nil then
        ambientFunc[key] = value
        if key == "Ambient" then
            return spoofed_ambient1(self, key, custom_ambient and DesiredColor or value)
        elseif key == "GlobalShadows" then
            return spoofed_ambient1(self, key, no_shadows and false or value)
        elseif key == "ColorShift_Top" or key == "ColorShift_Bottom" then
            return spoofed_ambient1(self, key, no_colorshift and Color3.new(0, 0, 0) or value)
        elseif key == "FogStart" or key == "FogEnd" then
            return spoofed_ambient1(self, key, no_fog and 1e6 or value)
        end
    end
--
    if self == Camera and key == "FieldOfView" then
        fovFunc[key] = value
        if FovEnabled then
            return spoofed_ambient1(self, key, SpoofedFov)
        end
    end
--
    return spoofed_ambient1(self, key, value)
end))


local AmbientToggle = WorldTab:CreateToggle({
   Name = "Aimbient",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(state)

custom_ambient = state

   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

-- // Misc

local FovToggle = MiscTab:CreateToggle({
   Name = "FovChanger",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(state)

FovEnabled = state

   end,
})


